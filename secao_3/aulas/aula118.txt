"""
A programação orientada a objetos (POO) é um paradigma de programação que organiza o código em torno de objetos que
representam entidades do mundo real. No Python, assim como em várias outras linguagens de programação, é possível utilizar a POO para desenvolver programas de forma estruturada e modular.

Existem alguns conceitos fundamentais na programação orientada a objetos em Python:

1. Classes: Uma classe é uma estrutura que define o comportamento e as propriedades de um objeto. Ela é a estrutura
fundamental da POO em Python. Por exemplo, você pode ter uma classe chamada "Carro" que define como um objeto carro se
comporta e quais atributos ele possui.

2. Objetos: Um objeto é uma instância de uma classe. Quando você cria um objeto, você está criando uma cópia da classe
com valores específicos para os atributos desse objeto. Por exemplo, você pode criar um objeto chamado "meu_carro" a
partir da classe "Carro", que possui valores únicos para atributos como cor, marca, modelo, etc.

3. Atributos: Atributos são as características de um objeto. Eles podem ser variáveis que armazenam valores específicos
para cada objeto ou métodos (funções) que definem o comportamento do objeto. Por exemplo, um atributo de um objeto carro
pode ser a sua cor.

4. Métodos: Métodos são funções definidas dentro de uma classe que descrevem as ações que um objeto pode realizar. Eles
podem alterar o estado do objeto ou retornar informações sobre ele. Por exemplo, um método de um objeto carro pode ser
"acelerar" ou "frear".

5. Encapsulamento: É o princípio de esconder os detalhes internos de um objeto e fornecer uma interface pública para
interagir com ele. Em Python, o encapsulamento pode ser alcançado usando convenções de nomenclatura, onde métodos e
atributos com um sublinhado no início são considerados como "privados", ou seja, devem ser acessados apenas internamente
dentro da classe.

6. Herança: A herança permite criar novas classes que herdam os atributos e métodos de uma classe existente. Essa
característica permite reutilizar o código e criar hierarquias de classes. Por exemplo, você pode ter uma classe
"CarroEsportivo" que herda da classe "Carro" e adiciona atributos e métodos específicos para carros esportivos.

7. Polimorfismo: Polimorfismo é a capacidade de um objeto pode ser referenciado de várias maneiras, dependendo do
contexto. Isso permite que objetos de diferentes classes sejam tratados de forma semelhante quando compartilham métodos
com o mesmo nome. Por exemplo, tanto um objeto "Carro" quanto um objeto "Moto" podem ter um método "acelerar", mesmo que
a implementação seja diferente para cada um.

Esses são apenas alguns conceitos básicos da programação orientada a objetos em Python. A POO é uma abordagem poderosa
para organizar e estruturar o código, promovendo a reutilização, modularidade e legibilidade do mesmo.
"""